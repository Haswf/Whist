@startuml
skinparam classAttributeIconSize 0
skinparam linetype polyline
skinparam linetype ortho
skinparam classAttributeIconSize 0
skinparam nodesep 50
skinparam ranksep 50
'skinparam linetype polyline
    'skinparam linetype ortho
    skinparam titleBorderRoundCorner 15
    skinparam titleBorderThickness 2
    skinparam titleBorderColor black
    skinparam titleBackgroundColor White
    title <font size = 20>Whist: Static Design Model </font>

header
<font color=red><font size=15>Project Team 30</font>
<font size = 12>Albert Tu (890424), Shuyang Fan (988301), Daniel Coleman (994887)</font>
endheader
class NPC implements IObserver, IPlayer {
    - playerNumber: int
    - strategy: ISelectCardStrategy
    - selected: Card
    - topic: IObservable
    - hand: Hand
    - info: Hand
    - playerSuits: HashMap<Integer, HashMap<Suit, Boolean>>
    - nest: HashMap<Suit, Boolean>
}

NPC "1" *--> "1" ISelectCardStrategy
NPC "1" --> "1" ITrickModel

interface ISelectCardStrategy {
    + selectCardLead(npc: NPC): Card
    + selectCardFollow(npc: NPC, winningCard: Card, trump: Suit): Card
}

class SmartStrategy implements ISelectCardStrategy{
'    + selectCardLead(NPC: npc): Card
'    + selectCardFollow(NPC: npc, winningCard: Card, trump: Suit): Card
}
class LegalStrategy implements ISelectCardStrategy{
'    + selectCardLead(NPC: npc): Card
'    + selectCardFollow(NPC: npc, winningCard: Card, trump: Suit): Card
}
interface IObserver {
    + update(): void
}

interface IObservable {
    + register(obj: IObserver): void
    + unregister(obj: IObserver): void
    + notifyObservers(): void
    + getUpdate(observer: IObserver): Object
}

interface ITrickModel {
    getCards(): Hand
    transfer(selected: Card, playerNum: int): void
    clear(): void
    getRecentCard(): Card
    getRecentCardPlayerNum(): int
}

class TrickModel implements IObservable, ITrickModel{
    - cards: Hand
    - recentCard: Card
    - recentCardPlayerNum: int
    - changed: boolean
    - observers: List<IObserver>

    + clear(): void
    + getCards(): Hand
    + transfer(selected: Card, playerNum: int): void
    + register(obj: IObserver): void
    + unregister(obj: IObserver): void
    + getUpdate(obj: IObserver): Object
}
IObservable --> "*" IObserver

class TrickView implements IObserver {
    - model: ITrickModel
    - controller: TrickController

    + update(): void
    + clear(): void
    + transfer(selected: Card): void
    - increaseWidth(): void
}

TrickView --> TrickController
TrickView --> ITrickModel

class TrickController {
   + clear(): void
   + transfer(selected: Card, playerNum: int): void
}

TrickController "1" *--> "1" ITrickModel
TrickController o-- TrickView

interface IWhistModel{
    addPlayer(player: IPlayer): boolean
    getNbPlayers(): int
    getNbStartCards(): int
    getHands(): Hand[]
    dealingOut(): void
    getPlayers(): List<IPlayer>
    nextPlayer(): void
    getCurrentPlayer(): IPlayer
    randomPlayerStartsRound(): void
    initRound(): void
    beatCurrentWinner(): void
    getWinnerId(): int
}

class WhistModel implements IWhistModel{

    - deck: Deck
    - nbPlayers: int
    - nbStartCards: int
    - hands: Hand[]
    - random: Random
    - winningCard: Card
    - selected: Card
    - currentPlayerId: int
    - currentPlayer: IPlayer
    - players: List<IPlayer>
    - trumps: CardUtil.Suit
    - winnerId: int

    + addPlayer(player: IPlayer): boolean
    + deal(deck: Deck, nbPlayers: int, nbStartCards: int): Hand[]
    + dealingOut(): void
    + nextPlayer (): void
    + randomPlayerStartsRound(): void
    + initRound(): void
    + beatCurrentWinner(): void
}

WhistModel --> "*" IPlayer

class WhistView {
    - model: IWhistModel
    - controller: WhistController
    - layouts: Map<Integer, RowLayout>

    + bindHandToLayout(): void
    + createLayout(): void
    + createView(): void
    + onGameOver(winner: int): void
    + showTrump(trumps: CardUtil.Suit): void
    + clearTrump(): void
}

WhistView --> IWhistModel

class WhistController{
    + dealingOut(): void
    + createPlayer(): void
    + gameOver(winner: int): void
    + playRound(): Optional<Integer>
    + endTrick(): void
    + leadTurn(): void
    + followTurn(): void

}

WhistController "1" *--> "1" IWhistModel
WhistController o--	 WhistView
WhistView --> WhistController
WhistController "1" o-- "1" TrickController
WhistController "1" o-- "1" ScoreBoardController

interface IScoreBoardModel {
    + initialise(): void
    + get(player: int): int
    + getScores(): Map<Integer, Integer>
    + score(player: int): void
}

class ScoreBoardModel implements IScoreBoardModel, IObservable{
    - scores: Map<Integer, Integer>
    - changed: boolean
    - observers: List<IObserver>

    + initialise(): void
    - put(player: int, score: int): void
    + score(player: int): void
    + get(player: int): int
    + register(obj: IObserver): void
    + unregister(obj: IObserver): void
    + notifyObservers(): void
    + getUpdate(obj: IObserver): Object
}

class ScoreBoardView implements IObserver{
    - scoreActors: Map<Integer, Actor>
    - model: IScoreBoardModel
    - controller: ScoreBoardController
    - scoreLocations: Location[]

    + createView(): void
    + update(): void
    + showWinner(winner: int): void
}

ScoreBoardView --> IScoreBoardModel
ScoreBoardView -->	 ScoreBoardController

class ScoreBoardController {
    score(player: int): void
    get(player: int): int
}

ScoreBoardController "1" *--> "1" IScoreBoardModel
ScoreBoardController o-- ScoreBoardView

class CardUtil{
    + {static} randomCard(hand: Hand): Card
    + {static} randomCard(list: List<Card>): Card
    + {static} rankGreater(card1: Card, card2: Card): boolean
}

class DeckFactory {
    - uniqueInstance: DeckFactory
    + getInstance(): DeckFactory
    + createStandardDeck(): Deck
}

class NPCFactory {
    - final random: Random
    - uniqueInstance: NPCFactory
    + getInstance(): NPCFactory
    + createLegalNPC(playerNumber: int, trickController: TrickController): NPC
    + createSmartNPC(playerNumber: int, trickController: TrickController): NPC
    + createRandomNPC(playerNumber: int, trickController: TrickController): NPC
}

class FontSingleton{
    - uniqueInstance: FontSingleton
    + getInstance(): FontSingleton
}

interface IPlayer {
    selectCardLead(): Card
    selectCardFollow(winningCard: Card, trump: CardUtil.Suit): Card
    setHand(hand: Hand): void
    thinking(): void
    reset(): void
}

class InteractivePlayer implements IPlayer {
    - hand: Hand
    - selected: Card

    + void setListener(): void
}
@enduml